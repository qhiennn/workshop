[{"uri":"https://qhiennn.github.io/workshop/vi/","title":"Backup &amp; Disaster Recovery","tags":[],"description":"","content":"L√†m vi·ªác v·ªõi AWS Backup \u0026amp; Disaster Recovery Automation T·ªïng quan Trong b√†i lab n√†y, b·∫°n s·∫Ω t√¨m hi·ªÉu c√°c kh√°i ni·ªám c∆° b·∫£n v√† th·ª±c h√†nh v·ªÅ AWS Backup v√† Disaster Recovery cho m√¥i tr∆∞·ªùng multi-database (DynamoDB, DocumentDB,\u0026hellip;).\nB√†i lab bao g·ªìm vi·ªác t·∫°o k·∫ø ho·∫°ch sao l∆∞u t·ª± ƒë·ªông, l∆∞u tr·ªØ b·∫£n sao an to√†n, ki·ªÉm th·ª≠ kh·∫£ nƒÉng ph·ª•c h·ªìi d·ªØ li·ªáu v√† thi·∫øt l·∫≠p th√¥ng b√°o khi c√≥ s·ª± c·ªë.\nN·ªôi dung  Gi·ªõi thi·ªáu d·ª± √°n C√°c b∆∞·ªõc chu·∫©n b·ªã T·∫°o v√† c·∫•u h√¨nh k·∫ø ho·∫°ch Backup T√≠ch h·ª£p Lambda Functions ƒë·ªÉ ki·ªÉm th·ª≠ \u0026amp; g·ª≠i th√¥ng b√°o D·ªçn d·∫πp t√†i nguy√™n  "},{"uri":"https://qhiennn.github.io/workshop/vi/1-introduce/","title":"Gi∆°ÃÅi thi√™Ã£u","tags":[],"description":"","content":"Backup v√† Disaster Recovery Automation cho Multi-Database Environment l√† gi·∫£i ph√°p gi√∫p t·ª± ƒë·ªông h√≥a vi·ªác sao l∆∞u v√† kh√¥i ph·ª•c d·ªØ li·ªáu cho nhi·ªÅu lo·∫°i c∆° s·ªü d·ªØ li·ªáu kh√°c nhau tr√™n AWS, nh∆∞ Amazon RDS, DynamoDB, DocumentDB.\nGi·∫£i ph√°p n√†y ƒë·∫£m b·∫£o d·ªØ li·ªáu lu√¥n s·∫µn s√†ng, gi·∫£m thi·ªÉu r·ªßi ro m·∫•t m√°t v√† ƒë√°p ·ª©ng y√™u c·∫ßu v·ªÅ RTO (Recovery Time Objective) v√† RPO (Recovery Point Objective).\nL·ª£i √≠ch ch√≠nh:  T·ª± ƒë·ªông h√≥a to√†n b·ªô qu√° tr√¨nh backup ƒë·ªãnh k·ª≥. Ki·ªÉm th·ª≠ kh·∫£ nƒÉng kh√¥i ph·ª•c d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o backup ho·∫°t ƒë·ªông. G·ª≠i c·∫£nh b√°o khi c√≥ s·ª± c·ªë backup ho·∫∑c kh√¥i ph·ª•c. B·∫£o m·∫≠t d·ªØ li·ªáu b·∫±ng m√£ h√≥a v√† ki·ªÉm so√°t truy c·∫≠p IAM. Gi√°m s√°t t·∫≠p trung qua CloudWatch v√† AWS Config. Kh·∫£ nƒÉng m·ªü r·ªông ƒë·ªÉ h·ªó tr·ª£ Disaster Recovery ƒëa v√πng trong t∆∞∆°ng lai.  V·ªõi c√°ch ti·∫øp c·∫≠n n√†y, h·ªá th·ªëng kh√¥ng ch·ªâ ph√π h·ª£p cho m√¥i tr∆∞·ªùng s·∫£n xu·∫•t th·ª±c t·∫ø m√† c√≤n gi√∫p ti·∫øt ki·ªám th·ªùi gian, chi ph√≠ v·∫≠n h√†nh v√† ƒë·∫£m b·∫£o an to√†n d·ªØ li·ªáu cho h·ªá th·ªëng. "},{"uri":"https://qhiennn.github.io/workshop/vi/4-s3log/4.1-testkiemtra/","title":"Test Ki·ªÉm Tra","tags":[],"description":"","content":"1. Test BackupNotificationLambda b·∫±ng EventBridge test event  ƒêi t·ªõi Lambda function: BackupNotificationLambda Ch·ªçn Test ‚Üí Configure test event Ch·ªçn Create new test event Name: testBackupFail D√°n EventBridge-style JSON sau v√†o Event JSON:   { \u0026#34;version\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;test-id-123\u0026#34;, \u0026#34;detail-type\u0026#34;: \u0026#34;Backup Job State Change\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;aws.backup\u0026#34;, \u0026#34;account\u0026#34;: \u0026#34;123456789012\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2025-08-10T12:00:00Z\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;ap-southeast-1\u0026#34;, \u0026#34;detail\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;FAILED\u0026#34;, \u0026#34;backupJobId\u0026#34;: \u0026#34;test-backup-123\u0026#34;, \u0026#34;backupVaultName\u0026#34;: \u0026#34;Default\u0026#34;, \u0026#34;resourceArn\u0026#34;: \u0026#34;arn:aws:rds:ap-southeast-1:123456789012:db:mydb\u0026#34; } }  Save ‚Üí Test ‚Üí Quan s√°t k·∫øt qu·∫£ v√† ki·ªÉm tra email.    2. Test BackupVerificationLambda (run manual)  ƒêi t·ªõi Lambda function: BackupVerificationLambda Ch·ªçn Test T·∫°o test event {} ‚Üí Test Ki·ªÉm tra logs:  N·∫øu Lambda publish SNS ‚Üí B·∫°n s·∫Ω nh·∫≠n email. N·∫øu kh√¥ng c√≥ backup jobs ‚Üí S·∫Ω th·∫•y log \u0026quot;No backup jobs found.\u0026quot;      3. Ki·ªÉm tra CloudWatch Logs  V√†o AWS Console ‚Üí CloudWatch ‚Üí Logs  Ch·ªçn nh√≥m log:  /aws/lambda/BackupNotificationLambda  /aws/lambda/BackupVerificationLambda    M·ªü stream log m·ªõi nh·∫•t ƒê·ªçc log ƒë·ªÉ x√°c nh·∫≠n k·∫øt qu·∫£.   BackupNotificationLambda  BackupVerificationLambda   "},{"uri":"https://qhiennn.github.io/workshop/vi/2-prerequiste/","title":"CaÃÅc b∆∞∆°ÃÅc chu√¢Ãân biÃ£","tags":[],"description":"","content":"N√¥Ã£i dung  Gi·ªõi thi·ªáu d·ª± √°n C√°c b∆∞·ªõc chu·∫©n b·ªã T·∫°o v√† c·∫•u h√¨nh k·∫ø ho·∫°ch Backup T√≠ch h·ª£p Lambda Functions ƒë·ªÉ ki·ªÉm th·ª≠ \u0026amp; g·ª≠i th√¥ng b√°o D·ªçn d·∫πp t√†i nguy√™n  "},{"uri":"https://qhiennn.github.io/workshop/vi/2-prerequiste/2.1-createvpc/","title":"Chu·∫©n b·ªã m√¥i tr∆∞·ªùng AWS ","tags":[],"description":"","content":"üöÄ H∆∞·ªõng d·∫´n t·∫°o EC2 Instance tr√™n AWS 1. ƒêƒÉng nh·∫≠p AWS Console  Truy c·∫≠p https://console.aws.amazon.com/ Ch·ªçn EC2 t·ª´ menu d·ªãch v·ª•.   2. T·∫°o EC2 Instance  B·∫•m n√∫t Launch instance. ƒê·∫∑t t√™n: v√≠ d·ª• EC2-DynamoDB-Workshop. Ch·ªçn Amazon Machine Image (AMI):  Amazon Linux 2 AMI (HVM), SSD Volume Type.   Ch·ªçn Instance Type:  t2.micro (Free Tier).   T·∫°o ho·∫∑c ch·ªçn Key Pair:  N·∫øu ch∆∞a c√≥: ch·ªçn Create new key pair, t·∫£i file .pem v·ªÅ.   C·∫•u h√¨nh Network:  VPC: Ch·ªçn VPC m·∫∑c ƒë·ªãnh ho·∫∑c VPC ri√™ng. Subnet: Ch·ªçn subnet theo v√πng. Enable Auto-assign Public IP: Yes.   Security Group:  T·∫°o m·ªõi ho·∫∑c ch·ªçn Security Group c√≥ rule:  SSH (Port 22) - Your IP. (Tu·ª≥ d·ª± √°n) m·ªü th√™m HTTP (Port 80), HTTPS (Port 443).     Storage:  8 GiB (SSD GP2) l√† ƒë·ªß cho workshop.   B·∫•m Launch Instance.    3. K·∫øt n·ªëi t·ªõi EC2  V√†o EC2 Dashboard ‚Üí Ch·ªçn instance v·ª´a t·∫°o. B·∫•m Connect ‚Üí Tab SSH client. Ch·∫°y tr√™n m√°y local:  chmod 400 your-key.pem ssh -i \u0026#34;your-key.pem\u0026#34; ec2-user@\u0026lt;Public-IP\u0026gt; "},{"uri":"https://qhiennn.github.io/workshop/vi/2-prerequiste/2.2-createpublicsubnet/","title":"T·∫°o Public subnet","tags":[],"description":"","content":"1. C√†i ƒë·∫∑t AWS CLI tr√™n EC2 (Amazon Linux 2) # üöÄ H∆∞·ªõng d·∫´n t·∫°o c√°c b·∫£ng DynamoDB tr√™n EC2 b·∫±ng AWS CLI ```bash sudo yum update -y sudo yum install unzip -y curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install aws --version  2. ƒêƒÉng nh·∫≠p AWS CLI aws configure Nh·∫≠p:\n AWS Access Key ID: (L·∫•y t·ª´ IAM) AWS Secret Access Key: (L·∫•y t·ª´ IAM)  Default region name: ap-southeast-1 Default output format: json   üîπ Y√™u c·∫ßu IAM User c√≥ quy·ªÅn dynamodb:CreateTable, dynamodb:PutItem, dynamodb:DescribeTable, dynamodb:ListTables.   3. T·∫°o file create_tables.sh nano create_tables.sh D√°n n·ªôi dung sau:\n#!/bin/bash  # ====== 1. CategoryHoiThao ====== aws dynamodb create-table \\  --table-name CategoryHoiThao \\  --attribute-definitions AttributeName=categoryId,AttributeType=S \\  --key-schema AttributeName=categoryId,KeyType=HASH \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name CategoryHoiThao \\  --item \u0026#39;{\u0026#34;categoryId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;C001\u0026#34;}, \u0026#34;name\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;H·ªôi th·∫£o c√¥ng ngh·ªá\u0026#34;}}\u0026#39; # ====== 2. HistoryBook ====== aws dynamodb create-table \\  --table-name HistoryBook \\  --attribute-definitions \\  AttributeName=bookingId,AttributeType=S \\  AttributeName=eventId,AttributeType=S \\  --key-schema \\  AttributeName=bookingId,KeyType=HASH \\  AttributeName=eventId,KeyType=RANGE \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name HistoryBook \\  --item \u0026#39;{\u0026#34;bookingId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;B001\u0026#34;}, \u0026#34;eventId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;E001\u0026#34;}, \u0026#34;status\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;confirmed\u0026#34;}}\u0026#39; # ====== 3. HistoryBookUsers ====== aws dynamodb create-table \\  --table-name HistoryBookUsers \\  --attribute-definitions \\  AttributeName=userId,AttributeType=S \\  AttributeName=bookingId,AttributeType=S \\  --key-schema \\  AttributeName=userId,KeyType=HASH \\  AttributeName=bookingId,KeyType=RANGE \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name HistoryBookUsers \\  --item \u0026#39;{\u0026#34;userId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;U001\u0026#34;}, \u0026#34;bookingId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;B001\u0026#34;}}\u0026#39; # ====== 4. HoiThao ====== aws dynamodb create-table \\  --table-name HoiThao \\  --attribute-definitions AttributeName=eventId,AttributeType=S \\  --key-schema AttributeName=eventId,KeyType=HASH \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name HoiThao \\  --item \u0026#39;{\u0026#34;eventId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;E001\u0026#34;}, \u0026#34;title\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;H·ªôi th·∫£o AI\u0026#34;}}\u0026#39; # ====== 5. Role ====== aws dynamodb create-table \\  --table-name Role \\  --attribute-definitions AttributeName=roleId,AttributeType=S \\  --key-schema AttributeName=roleId,KeyType=HASH \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name Role \\  --item \u0026#39;{\u0026#34;roleId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;R001\u0026#34;}, \u0026#34;roleName\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Admin\u0026#34;}}\u0026#39; # ====== 6. User ====== aws dynamodb create-table \\  --table-name User \\  --attribute-definitions AttributeName=userId,AttributeType=S \\  --key-schema AttributeName=userId,KeyType=HASH \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name User \\  --item \u0026#39;{\u0026#34;userId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;U001\u0026#34;}, \u0026#34;userName\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;Nguyen Van A\u0026#34;}}\u0026#39; # ====== 7. UserGiaiDau ====== aws dynamodb create-table \\  --table-name UserGiaiDau \\  --attribute-definitions \\  AttributeName=userId,AttributeType=S \\  AttributeName=tournamentId,AttributeType=S \\  --key-schema \\  AttributeName=userId,KeyType=HASH \\  AttributeName=tournamentId,KeyType=RANGE \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name UserGiaiDau \\  --item \u0026#39;{\u0026#34;userId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;U001\u0026#34;}, \u0026#34;tournamentId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;T001\u0026#34;}}\u0026#39; # ====== 8. UserHoiThao ====== aws dynamodb create-table \\  --table-name UserHoiThao \\  --attribute-definitions \\  AttributeName=userId,AttributeType=S \\  AttributeName=eventId,AttributeType=S \\  --key-schema \\  AttributeName=userId,KeyType=HASH \\  AttributeName=eventId,KeyType=RANGE \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name UserHoiThao \\  --item \u0026#39;{\u0026#34;userId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;U001\u0026#34;}, \u0026#34;eventId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;E001\u0026#34;}}\u0026#39; # ====== 9. UserLiveShow ====== aws dynamodb create-table \\  --table-name UserLiveShow \\  --attribute-definitions \\  AttributeName=userId,AttributeType=S \\  AttributeName=liveShowId,AttributeType=S \\  --key-schema \\  AttributeName=userId,KeyType=HASH \\  AttributeName=liveShowId,KeyType=RANGE \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name UserLiveShow \\  --item \u0026#39;{\u0026#34;userId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;U001\u0026#34;}, \u0026#34;liveShowId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;L001\u0026#34;}}\u0026#39; # ====== 10. UserRole ====== aws dynamodb create-table \\  --table-name UserRole \\  --attribute-definitions \\  AttributeName=userId,AttributeType=S \\  AttributeName=roleId,AttributeType=S \\  --key-schema \\  AttributeName=userId,KeyType=HASH \\  AttributeName=roleId,KeyType=RANGE \\  --billing-mode PAY_PER_REQUEST aws dynamodb put-item \\  --table-name UserRole \\  --item \u0026#39;{\u0026#34;userId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;U001\u0026#34;}, \u0026#34;roleId\u0026#34;: {\u0026#34;S\u0026#34;: \u0026#34;R001\u0026#34;}}\u0026#39; echo \u0026#34;‚úÖ T·∫°o xong t·∫•t c·∫£ b·∫£ng v√† d·ªØ li·ªáu m·∫´u\u0026#34;  4. C·∫•p quy·ªÅn ch·∫°y \u0026amp; th·ª±c thi script chmod +x create_tables.sh ./create_tables.sh  5. Ki·ªÉm tra k·∫øt qu·∫£ aws dynamodb list-tables N·∫øu t·∫°o th√†nh c√¥ng s·∫Ω hi·ªÉn th·ªã:\n{ \u0026#34;TableNames\u0026#34;: [ \u0026#34;CategoryHoiThao\u0026#34;, \u0026#34;HistoryBook\u0026#34;, \u0026#34;HistoryBookUsers\u0026#34;, \u0026#34;HoiThao\u0026#34;, \u0026#34;Role\u0026#34;, \u0026#34;User\u0026#34;, \u0026#34;UserGiaiDau\u0026#34;, \u0026#34;UserHoiThao\u0026#34;, \u0026#34;UserLiveShow\u0026#34;, \u0026#34;UserRole\u0026#34; ] }  6. M·∫πo x·ª≠ l√Ω l·ªói  N·∫øu g·∫∑p l·ªói AccessDeniedException, ki·ªÉm tra IAM Policy c·ªßa user, ƒë·∫£m b·∫£o c√≥ quy·ªÅn:  { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } "},{"uri":"https://qhiennn.github.io/workshop/vi/3-accessibilitytoinstances/","title":"TaÃ£o k√™ÃÅt n√¥ÃÅi ƒë√™ÃÅn maÃÅy chuÃâ EC2","tags":[],"description":"","content":"1. T·∫°o k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß EC2  T√†i kho·∫£n AWS c√≥ quy·ªÅn: AWSBackupFullAccess AmazonDynamoDBFullAccess Quy·ªÅn s·ª≠ d·ª•ng AWS KMS n·∫øu mu·ªën m√£ h√≥a backup. ƒê√£ ƒëƒÉng nh·∫≠p v√†o AWS Management Console.   2. Truy c·∫≠p d·ªãch v·ª• AWS Backup  M·ªü AWS Console, t√¨m AWS Backup tr√™n thanh t√¨m ki·∫øm. Nh·∫•n ch·ªçn ƒë·ªÉ v√†o giao di·ªán d·ªãch v·ª•.    3. T·∫°o Backup Vault (Kho l∆∞u tr·ªØ backup)  V√†o Backup vaults ‚Üí Create backup vault. Nh·∫≠p:   Backup vault name: DynamoDBBackupVault Encryption key: ch·ªçn AWS managed key (Default) ho·∫∑c KMS key.  Nh·∫•n Create backup vault.    4. T·∫°o Backup Plan (K·∫ø ho·∫°ch sao l∆∞u)  V√†o Backup plans ‚Üí Create backup plan. Ch·ªçn Build a new plan. ƒêi·ªÅn:   Backup plan name: DynamoDBDailyBackupPlan  Trong Backup rule:   Rule name: DailyBackup Backup vault: ch·ªçn DynamoDBBackupVault Frequency: Daily Backup window: m·∫∑c ƒë·ªãnh ho·∫∑c ch·ªçn gi·ªù sao l∆∞u (VD: 02:00 UTC) Lifecycle: Expire after 30 days  Nh·∫•n Create plan.    5. G√°n DynamoDB v√†o Backup Plan  Trong giao di·ªán k·∫ø ho·∫°ch, nh·∫•n Assign resources. Resource type: DynamoDB Assign by: Resource ID Tick ch·ªçn t·∫•t c·∫£ c√°c b·∫£ng. IAM role: AWSBackupDefaultServiceRole   N·∫øu ch∆∞a c√≥ role, t·∫°o trong IAM:  Service: Backup G√°n quy·ªÅn:  AWSBackupServiceRolePolicyForBackup AWSBackupServiceRolePolicyForRestores      Nh·∫•n Assign resources.    6. Ki·ªÉm tra c·∫•u h√¨nh Backup  V√†o Protected resources ƒë·ªÉ ki·ªÉm tra c√°c b·∫£ng ƒë√£ g√°n.  V√†o Backup plans ‚Üí DynamoDBDailyBackupPlan ƒë·ªÉ xem l·ªãch backup.    7. Ch·∫°y th·ª≠ sao l∆∞u th·ªß c√¥ng  V√†o Protected resources ‚Üí ch·ªçn b·∫£ng, v√≠ d·ª• CategoryHoiThao. Nh·∫•n Create on-demand backup. Nh·∫≠p:   Backup name: TestBackup_CategoryHoiThao Backup vault: DynamoDBBackupVault  Nh·∫•n Create on-demand backup. Xem k·∫øt qu·∫£ t·∫°i Backup vaults ‚Üí DynamoDBBackupVault.    8. Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ backup (Restore Test)  V√†o Backup vaults ‚Üí DynamoDBBackupVault. Ch·ªçn b·∫£n backup ‚Üí Restore. Nh·∫≠p:   Target table name: CategoryHoiThao_RestoreTest  Nh·∫•n Restore backup. Ki·ªÉm tra t·∫°i DynamoDB ‚Üí Tables.    9. L∆∞u √Ω quan tr·ªçng  Chi ph√≠: T√≠nh theo dung l∆∞·ª£ng v√† th·ªùi gian l∆∞u tr·ªØ. B·∫£o m·∫≠t: N√™n b·∫≠t KMS Encryption. Gi√°m s√°t: C√≥ th·ªÉ b·∫≠t c·∫£nh b√°o qua CloudWatch.  "},{"uri":"https://qhiennn.github.io/workshop/vi/4-s3log/","title":" Tri·ªÉn khai AWS Backup Alert &amp; Verification v·ªõi Lambda v√† SNS","tags":[],"description":"","content":"1. Chu·∫©n b·ªã SNS Topic (g·ª≠i th√¥ng b√°o Email/SMS) 1.1 T·∫°o SNS Topic  M·ªü AWS Console ‚Üí t√¨m SNS ‚Üí Topics ‚Üí Create topic. Ch·ªçn Standard. Name: BackupAlertsTopic. Nh·∫•n Create topic.   1.2 T·∫°o Subscription (Email/SMS)  Trong SNS Topic v·ª´a t·∫°o ‚Üí Create subscription. Protocol: Email (ho·∫∑c SMS). Endpoint: nh·∫≠p email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i. Nh·∫•n Create subscription. X√°c nh·∫≠n qua email (b·∫Øt bu·ªôc n·∫øu ch·ªçn Email).    2. Lambda Function 1 \u0026mdash; Backup Verification 2.1 T·∫°o Lambda  V√†o AWS Console ‚Üí Lambda ‚Üí Create function. Author from scratch. Function name: BackupVerificationLambda. Runtime: Python 3.10.  Role: ch·ªçn Create a new role with basic Lambda permissions. Nh·∫•n Create function.   2.2 G√°n quy·ªÅn cho Lambda V√†o IAM Console ‚Üí ch·ªçn role c·ªßa Lambda ‚Üí Add inline policy ‚Üí JSON: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;backup:ListBackupJobs\u0026#34;, \u0026#34;backup:DescribeBackupJob\u0026#34;, \u0026#34;dynamodb:RestoreTableFromBackup\u0026#34;, \u0026#34;rds:RestoreDBClusterFromSnapshot\u0026#34;, \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } L∆∞u v·ªõi t√™n LambdaBackupPolicy. 2.3 Th√™m bi·∫øn m√¥i tr∆∞·ªùng  Key: SNS_TOPIC_ARN\\ Value: ARN c·ªßa SNS Topic v·ª´a t·∫°o.   2.4 Code Python  Deploy code:  import boto3 import os backup_client = boto3.client(\u0026#39;backup\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) SNS_TOPIC_ARN = os.environ.get(\u0026#39;SNS_TOPIC_ARN\u0026#39;) def lambda_handler(event, context): if not SNS_TOPIC_ARN: print(\u0026#34;L·ªói: Ch∆∞a c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng SNS_TOPIC_ARN.\u0026#34;) return try: backups = backup_client.list_backup_jobs(MaxResults=1)[\u0026#39;BackupJobs\u0026#39;] except Exception as e: print(f\u0026#34;L·ªói khi l·∫•y danh s√°ch backup: {e}\u0026#34;) return if not backups: print(\u0026#34;Kh√¥ng t√¨m th·∫•y backup n√†o.\u0026#34;) return last_backup = backups[0] print(f\u0026#34;Ki·ªÉm tra backup: {last_backup[\u0026#39;BackupVaultName\u0026#39;]}- {last_backup[\u0026#39;State\u0026#39;]}\u0026#34;) if last_backup[\u0026#39;State\u0026#39;] != \u0026#39;COMPLETED\u0026#39;: sns.publish( TopicArn=SNS_TOPIC_ARN, Message=f\u0026#34;Backup th·∫•t b·∫°i: {last_backup}\u0026#34;, Subject=\u0026#34;Backup Verification Failed\u0026#34; ) else: print(\u0026#34;Backup OK.\u0026#34;)  3. Lambda Function 2 \u0026mdash; Notification Lambda 3.1 T·∫°o Lambda  V√†o AWS Console ‚Üí Lambda ‚Üí Create function. Function name: BackupNotificationLambda. Runtime: Python 3.10. Role: ch·ªçn Create a new role with basic Lambda permissions.   3.2 G√°n quy·ªÅn SNS Publish IAM Role ‚Üí Add inline policy:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;sns:Publish\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } 3.3 Th√™m bi·∫øn m√¥i tr∆∞·ªùng  Key: SNS_TOPIC_ARN\\ Value: ARN c·ªßa SNS Topic.   3.4 Code Python import boto3 import os import json sns = boto3.client(\u0026#39;sns\u0026#39;) SNS_TOPIC_ARN = os.environ.get(\u0026#39;SNS_TOPIC_ARN\u0026#39;) def lambda_handler(event, context): print(\u0026#34;Nh·∫≠n event t·ª´ AWS Backup:\u0026#34;) print(json.dumps(event, indent=2, ensure_ascii=False)) if not SNS_TOPIC_ARN: print(\u0026#34;L·ªói: Ch∆∞a c·∫•u h√¨nh SNS_TOPIC_ARN trong Environment variables.\u0026#34;) return try: sns.publish( TopicArn=SNS_TOPIC_ARN, Message=f\u0026#34;Backup/Restore th·∫•t b·∫°i. Chi ti·∫øt: {json.dumps(event, ensure_ascii=False)}\u0026#34;, Subject=\u0026#34;AWS Backup Notification\u0026#34; ) print(\u0026#34;G·ª≠i th√¥ng b√°o SNS th√†nh c√¥ng.\u0026#34;) except Exception as e: print(f\u0026#34;L·ªói khi g·ª≠i SNS: {e}\u0026#34;)  4. K·∫øt n·ªëi Lambda v·ªõi AWS Backup Events (EventBridge) 4.1 M·ªü EventBridge  AWS Console ‚Üí t√¨m EventBridge ‚Üí Rules ‚Üí Create rule.  4.2 C·∫•u h√¨nh Rule  Name: BackupFailEvents. Event Source: AWS events or EventBridge partner events. Event pattern:  { \u0026#34;source\u0026#34;: [\u0026#34;aws.backup\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;Backup Job State Change\u0026#34;, \u0026#34;Restore Job State Change\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;state\u0026#34;: [\u0026#34;FAILED\u0026#34;] } }  Target: ch·ªçn Lambda BackupNotificationLambda ho·∫∑c BackupVerificationLambda.    "},{"uri":"https://qhiennn.github.io/workshop/vi/5-cleanup/","title":"D·ªçn d·∫πp t√†i nguy√™n  ","tags":[],"description":"","content":"Sau khi ho√†n th√†nh b√†i lab, b·∫°n c·∫ßn x√≥a c√°c t√†i nguy√™n AWS ƒë√£ t·∫°o ƒë·ªÉ tr√°nh ph√°t sinh chi ph√≠ kh√¥ng c·∫ßn thi·∫øt. Ph·∫ßn n√†y s·∫Ω h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc ƒë·ªÉ x√≥a c√°c t√†i nguy√™n ƒë√£ t·∫°o trong workshop Backup \u0026amp; Disaster Recovery.\nX√≥a EC2 instance  Truy c·∫≠p giao di·ªán qu·∫£n tr·ªã d·ªãch v·ª• EC2   Click Instances. Click ch·ªçn EC2BackUp. Click Instance state. Click Terminate instance, sau ƒë√≥ click Terminate ƒë·ªÉ x√°c nh·∫≠n.  X√≥a Backup Plan \u0026amp; Backup Vault  V√†o AWS Console ‚Üí AWS Backup. X√≥a Backup Plan:  Ch·ªçn Backup plans. Ch·ªçn k·∫ø ho·∫°ch ƒë√£ t·∫°o trong lab. Nh·∫•n Delete ‚Üí X√°c nh·∫≠n.   X√≥a Backup Vault (n·∫øu kh√¥ng c√≤n s·ª≠ d·ª•ng):  V√†o Backup vaults. Ch·ªçn Vault c·ªßa b·∫°n (v√≠ d·ª• Default ho·∫∑c t√™n t√πy ch·ªânh). X√≥a to√†n b·ªô Recovery Points b√™n trong Vault. Nh·∫•n Delete vault.    X√≥a c√°c b·∫£ng DynamoDB  V√†o AWS Console ‚Üí DynamoDB ‚Üí Tables. Ch·ªçn v√† x√≥a t·ª´ng b·∫£ng ƒë√£ t·∫°o:  CategoryHoiThao HistoryBook HistoryBookUsers HoiThao Role User UserGiaiDau UserHoiThao UserLiveShow UserRole   Nh·∫•n Delete table ‚Üí X√°c nh·∫≠n.  X√≥a DocumentDB Cluster  V√†o AWS Console ‚Üí Amazon DocumentDB. Ch·ªçn cluster. Ch·ªçn Actions ‚Üí Delete cluster. Tick ch·ªçn x√≥a snapshots (n·∫øu kh√¥ng c·∫ßn gi·ªØ) ‚Üí X√°c nh·∫≠n.   X√≥a Lambda Functions  V√†o AWS Console ‚Üí Lambda. X√≥a c√°c h√†m:  BackupNotificationLambda BackupVerificationLambda     X√≥a SNS Topics \u0026amp; Subscriptions  V√†o AWS Console ‚Üí Amazon SNS. X√≥a Topic d√πng ƒë·ªÉ g·ª≠i th√¥ng b√°o. X√≥a c√°c Subscription li√™n quan.   X√≥a IAM Roles v√† Policies  V√†o AWS Console ‚Üí IAM. X√≥a c√°c Role t·∫°o cho Lambda v√† truy c·∫≠p Database. X√≥a c√°c Policy t√πy ch·ªânh ƒë√£ t·∫°o trong lab.   "},{"uri":"https://qhiennn.github.io/workshop/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://qhiennn.github.io/workshop/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]